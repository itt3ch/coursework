{"ast":null,"code":"var _jsxFileName = \"d:\\\\coursework\\\\src\\\\components\\\\BinarySearchTree.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport BSTVisualizer from \"../components/BSTVisualizer\";\nimport \"../styles/BinarySearchTree.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass TreeNode {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\nclass BinarySearchTree {\n  constructor() {\n    this.root = null;\n  }\n  insert(value) {\n    const newNode = new TreeNode(value);\n    if (!this.root) {\n      this.root = newNode;\n      return;\n    }\n    let current = this.root;\n    while (true) {\n      if (value < current.value) {\n        if (!current.left) {\n          current.left = newNode;\n          break;\n        }\n        current = current.left;\n      } else {\n        if (!current.right) {\n          current.right = newNode;\n          break;\n        }\n        current = current.right;\n      }\n    }\n  }\n  find(value) {\n    let current = this.root;\n    while (current) {\n      if (value === current.value) return true;\n      current = value < current.value ? current.left : current.right;\n    }\n    return false;\n  }\n  delete(value) {\n    const deleteNode = (node, value) => {\n      if (!node) return null;\n      if (value < node.value) {\n        node.left = deleteNode(node.left, value);\n        return node;\n      } else if (value > node.value) {\n        node.right = deleteNode(node.right, value);\n        return node;\n      } else {\n        if (!node.left) return node.right;\n        if (!node.right) return node.left;\n        let successor = node.right;\n        while (successor.left) {\n          successor = successor.left;\n        }\n        node.value = successor.value;\n        node.right = deleteNode(node.right, successor.value);\n        return node;\n      }\n    };\n    this.root = deleteNode(this.root, value);\n  }\n  getTree() {\n    return this.root;\n  }\n}\nconst BinarySearchTreeComponent = () => {\n  _s();\n  const [tree, setTree] = useState(new BinarySearchTree());\n  const [inputValue, setInputValue] = useState(\"\");\n  const [action, setAction] = useState(null);\n  const [updatedTree, setUpdatedTree] = useState(tree.getTree());\n  const [lastModified, setLastModified] = useState(null);\n  const handleInsert = () => {\n    if (!isNaN(inputValue) && inputValue !== \"\") {\n      const newTree = new BinarySearchTree();\n      Object.assign(newTree, tree);\n      newTree.insert(parseInt(inputValue));\n      setTree(newTree);\n      setUpdatedTree(newTree.getTree());\n      setAction(\"insert\");\n      setLastModified(parseInt(inputValue)); // Зберігаємо останній змінений вузол\n      setInputValue(\"\");\n    }\n  };\n  const handleDelete = () => {\n    if (!isNaN(inputValue) && inputValue !== \"\") {\n      const newTree = new BinarySearchTree();\n      Object.assign(newTree, tree); // Копіюємо існуюче дерево\n      newTree.delete(parseInt(inputValue));\n      setTree(newTree); // Оновлюємо стан\n      setUpdatedTree(newTree.getTree());\n      setAction(\"delete\");\n      setInputValue(\"\");\n    }\n  };\n  const handleFind = () => {\n    if (!isNaN(inputValue) && inputValue !== \"\") {\n      const found = tree.find(parseInt(inputValue));\n      alert(found ? \"Node found\" : \"Node not found\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Binary Search Tree\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputValue,\n        onChange: e => setInputValue(e.target.value),\n        placeholder: \"Enter a number\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleInsert,\n        children: \"Insert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDelete,\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleFind,\n        children: \"Find\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BSTVisualizer, {\n      tree: tree.getTree(),\n      searchValue: parseInt(searchValue)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n};\n_s(BinarySearchTreeComponent, \"DU76JoeupZR26FsN6JajuLT34x0=\");\n_c = BinarySearchTreeComponent;\nexport { BinarySearchTree };\nexport default BinarySearchTreeComponent;\nvar _c;\n$RefreshReg$(_c, \"BinarySearchTreeComponent\");","map":{"version":3,"names":["React","useState","BSTVisualizer","jsxDEV","_jsxDEV","TreeNode","constructor","value","left","right","BinarySearchTree","root","insert","newNode","current","find","delete","deleteNode","node","successor","getTree","BinarySearchTreeComponent","_s","tree","setTree","inputValue","setInputValue","action","setAction","updatedTree","setUpdatedTree","lastModified","setLastModified","handleInsert","isNaN","newTree","Object","assign","parseInt","handleDelete","handleFind","found","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","e","target","placeholder","onClick","searchValue","_c","$RefreshReg$"],"sources":["d:/coursework/src/components/BinarySearchTree.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport BSTVisualizer from \"../components/BSTVisualizer\";\r\nimport \"../styles/BinarySearchTree.css\";\r\n\r\nclass TreeNode {\r\n  constructor(value) {\r\n    this.value = value;\r\n    this.left = null;\r\n    this.right = null;\r\n  }\r\n}\r\n\r\nclass BinarySearchTree {\r\n  constructor() {\r\n    this.root = null;\r\n  }\r\n\r\n  insert(value) {\r\n    const newNode = new TreeNode(value);\r\n    if (!this.root) {\r\n      this.root = newNode;\r\n      return;\r\n    }\r\n    let current = this.root;\r\n    while (true) {\r\n      if (value < current.value) {\r\n        if (!current.left) {\r\n          current.left = newNode;\r\n          break;\r\n        }\r\n        current = current.left;\r\n      } else {\r\n        if (!current.right) {\r\n          current.right = newNode;\r\n          break;\r\n        }\r\n        current = current.right;\r\n      }\r\n    }\r\n  }\r\n\r\n  find(value) {\r\n    let current = this.root;\r\n    while (current) {\r\n      if (value === current.value) return true;\r\n      current = value < current.value ? current.left : current.right;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  delete(value) {\r\n    const deleteNode = (node, value) => {\r\n      if (!node) return null;\r\n      if (value < node.value) {\r\n        node.left = deleteNode(node.left, value);\r\n        return node;\r\n      } else if (value > node.value) {\r\n        node.right = deleteNode(node.right, value);\r\n        return node;\r\n      } else {\r\n        if (!node.left) return node.right;\r\n        if (!node.right) return node.left;\r\n\r\n        let successor = node.right;\r\n        while (successor.left) {\r\n          successor = successor.left;\r\n        }\r\n        node.value = successor.value;\r\n        node.right = deleteNode(node.right, successor.value);\r\n        return node;\r\n      }\r\n    };\r\n    this.root = deleteNode(this.root, value);\r\n  }\r\n\r\n  getTree() {\r\n    return this.root;\r\n  }\r\n}\r\n\r\nconst BinarySearchTreeComponent = () => {\r\n  const [tree, setTree] = useState(new BinarySearchTree());\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const [action, setAction] = useState(null);\r\n  const [updatedTree, setUpdatedTree] = useState(tree.getTree());\r\n\r\n  const [lastModified, setLastModified] = useState(null);\r\n\r\n  const handleInsert = () => {\r\n    if (!isNaN(inputValue) && inputValue !== \"\") {\r\n      const newTree = new BinarySearchTree();\r\n      Object.assign(newTree, tree);\r\n      newTree.insert(parseInt(inputValue));\r\n      setTree(newTree);\r\n      setUpdatedTree(newTree.getTree());\r\n      setAction(\"insert\");\r\n      setLastModified(parseInt(inputValue)); // Зберігаємо останній змінений вузол\r\n      setInputValue(\"\");\r\n    }\r\n  };\r\n  \r\n  const handleDelete = () => {\r\n    if (!isNaN(inputValue) && inputValue !== \"\") {\r\n      const newTree = new BinarySearchTree();\r\n      Object.assign(newTree, tree); // Копіюємо існуюче дерево\r\n      newTree.delete(parseInt(inputValue));\r\n      setTree(newTree); // Оновлюємо стан\r\n      setUpdatedTree(newTree.getTree());\r\n      setAction(\"delete\");\r\n      setInputValue(\"\");\r\n    }\r\n  };\r\n  \r\n\r\n  const handleFind = () => {\r\n    if (!isNaN(inputValue) && inputValue !== \"\") {\r\n      const found = tree.find(parseInt(inputValue));\r\n      alert(found ? \"Node found\" : \"Node not found\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Binary Search Tree</h1>\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          value={inputValue}\r\n          onChange={(e) => setInputValue(e.target.value)}\r\n          placeholder=\"Enter a number\"\r\n        />\r\n        <button onClick={handleInsert}>Insert</button>\r\n        <button onClick={handleDelete}>Delete</button>\r\n        <button onClick={handleFind}>Find</button>\r\n      </div>\r\n      <BSTVisualizer tree={tree.getTree()} searchValue={parseInt(searchValue)} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { BinarySearchTree };\r\nexport default BinarySearchTreeComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}