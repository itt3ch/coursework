{"ast":null,"code":"var _jsxFileName = \"d:\\\\coursework\\\\src\\\\components\\\\BSTVisualizer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport \"../styles/BSTVisualizer.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BSTVisualizer = ({\n  tree,\n  searchValue\n}) => {\n  _s();\n  const svgRef = useRef();\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n    const width = 800;\n    const height = 400;\n\n    // Очистити SVG перед малюванням\n    svg.selectAll(\"*\").remove();\n    svg.attr(\"width\", width).attr(\"height\", height).style(\"background\", \"#f9f9f9\").style(\"border\", \"1px solid #ccc\");\n    const drawTree = (node, x, y, depth) => {\n      if (!node) return;\n      const offsetX = 300 / (depth + 1);\n      const offsetY = 80;\n\n      // Лінії до дочірніх вузлів\n      if (node.left) {\n        svg.append(\"line\").attr(\"x1\", x).attr(\"y1\", y).attr(\"x2\", x - offsetX).attr(\"y2\", y + offsetY).attr(\"stroke\", \"#00796b\").attr(\"stroke-width\", 2);\n        drawTree(node.left, x - offsetX, y + offsetY, depth + 1);\n      }\n      if (node.right) {\n        svg.append(\"line\").attr(\"x1\", x).attr(\"y1\", y).attr(\"x2\", x + offsetX).attr(\"y2\", y + offsetY).attr(\"stroke\", \"#00796b\").attr(\"stroke-width\", 2);\n        drawTree(node.right, x + offsetX, y + offsetY, depth + 1);\n      }\n\n      // Вузли дерева\n      svg.append(\"circle\").attr(\"cx\", x).attr(\"cy\", y).attr(\"r\", 20).attr(\"fill\", node.value === searchValue ? \"#ffeb3b\" : \"#ffffff\") // Підсвічування шуканого вузла\n      .attr(\"stroke\", \"#000\").attr(\"stroke-width\", 2);\n\n      // Текст у вузлі\n      svg.append(\"text\").attr(\"x\", x).attr(\"y\", y + 5).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"12px\").attr(\"font-weight\", \"bold\").text(node.value);\n    };\n    const visualizeSearch = (node, x, y, depth) => {\n      if (!node) return;\n      const offsetX = 300 / (depth + 1);\n      const offsetY = 80;\n\n      // Підсвічуємо поточний вузол\n      svg.append(\"circle\").attr(\"cx\", x).attr(\"cy\", y).attr(\"r\", 20).attr(\"fill\", \"#ccc\") // Сірий колір для візуалізації\n      .attr(\"stroke\", \"#000\").attr(\"stroke-width\", 2);\n\n      // Якщо значення знайдено, завершуємо пошук\n      if (node.value === searchValue) return;\n\n      // Переходимо до наступного вузла\n      setTimeout(() => {\n        if (searchValue < node.value) {\n          visualizeSearch(node.left, x - offsetX, y + offsetY, depth + 1);\n        } else {\n          visualizeSearch(node.right, x + offsetX, y + offsetY, depth + 1);\n        }\n      }, 1000);\n    };\n    if (tree) {\n      drawTree(tree, width / 2, 50, 1); // Малюємо дерево\n      if (searchValue !== null && !isNaN(searchValue)) {\n        visualizeSearch(tree, width / 2, 50, 1); // Візуалізуємо пошук\n      }\n    }\n  }, [tree, searchValue]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: svgRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 10\n  }, this);\n};\n_s(BSTVisualizer, \"89Ty783ABEwsfMbSOeu9vscWF34=\");\n_c = BSTVisualizer;\nexport default BSTVisualizer;\nvar _c;\n$RefreshReg$(_c, \"BSTVisualizer\");","map":{"version":3,"names":["React","useEffect","useRef","d3","jsxDEV","_jsxDEV","BSTVisualizer","tree","searchValue","_s","svgRef","svg","select","current","width","height","selectAll","remove","attr","style","drawTree","node","x","y","depth","offsetX","offsetY","left","append","right","value","text","visualizeSearch","setTimeout","isNaN","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["d:/coursework/src/components/BSTVisualizer.jsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport \"../styles/BSTVisualizer.css\";\r\n\r\nconst BSTVisualizer = ({ tree, searchValue }) => {\r\n  const svgRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const svg = d3.select(svgRef.current);\r\n    const width = 800;\r\n    const height = 400;\r\n\r\n    // Очистити SVG перед малюванням\r\n    svg.selectAll(\"*\").remove();\r\n\r\n    svg\r\n      .attr(\"width\", width)\r\n      .attr(\"height\", height)\r\n      .style(\"background\", \"#f9f9f9\")\r\n      .style(\"border\", \"1px solid #ccc\");\r\n\r\n    const drawTree = (node, x, y, depth) => {\r\n      if (!node) return;\r\n\r\n      const offsetX = 300 / (depth + 1);\r\n      const offsetY = 80;\r\n\r\n      // Лінії до дочірніх вузлів\r\n      if (node.left) {\r\n        svg\r\n          .append(\"line\")\r\n          .attr(\"x1\", x)\r\n          .attr(\"y1\", y)\r\n          .attr(\"x2\", x - offsetX)\r\n          .attr(\"y2\", y + offsetY)\r\n          .attr(\"stroke\", \"#00796b\")\r\n          .attr(\"stroke-width\", 2);\r\n\r\n        drawTree(node.left, x - offsetX, y + offsetY, depth + 1);\r\n      }\r\n\r\n      if (node.right) {\r\n        svg\r\n          .append(\"line\")\r\n          .attr(\"x1\", x)\r\n          .attr(\"y1\", y)\r\n          .attr(\"x2\", x + offsetX)\r\n          .attr(\"y2\", y + offsetY)\r\n          .attr(\"stroke\", \"#00796b\")\r\n          .attr(\"stroke-width\", 2);\r\n\r\n        drawTree(node.right, x + offsetX, y + offsetY, depth + 1);\r\n      }\r\n\r\n      // Вузли дерева\r\n      svg\r\n        .append(\"circle\")\r\n        .attr(\"cx\", x)\r\n        .attr(\"cy\", y)\r\n        .attr(\"r\", 20)\r\n        .attr(\"fill\", node.value === searchValue ? \"#ffeb3b\" : \"#ffffff\") // Підсвічування шуканого вузла\r\n        .attr(\"stroke\", \"#000\")\r\n        .attr(\"stroke-width\", 2);\r\n\r\n      // Текст у вузлі\r\n      svg\r\n        .append(\"text\")\r\n        .attr(\"x\", x)\r\n        .attr(\"y\", y + 5)\r\n        .attr(\"text-anchor\", \"middle\")\r\n        .attr(\"font-size\", \"12px\")\r\n        .attr(\"font-weight\", \"bold\")\r\n        .text(node.value);\r\n    };\r\n\r\n    const visualizeSearch = (node, x, y, depth) => {\r\n      if (!node) return;\r\n\r\n      const offsetX = 300 / (depth + 1);\r\n      const offsetY = 80;\r\n\r\n      // Підсвічуємо поточний вузол\r\n      svg\r\n        .append(\"circle\")\r\n        .attr(\"cx\", x)\r\n        .attr(\"cy\", y)\r\n        .attr(\"r\", 20)\r\n        .attr(\"fill\", \"#ccc\") // Сірий колір для візуалізації\r\n        .attr(\"stroke\", \"#000\")\r\n        .attr(\"stroke-width\", 2);\r\n\r\n      // Якщо значення знайдено, завершуємо пошук\r\n      if (node.value === searchValue) return;\r\n\r\n      // Переходимо до наступного вузла\r\n      setTimeout(() => {\r\n        if (searchValue < node.value) {\r\n          visualizeSearch(node.left, x - offsetX, y + offsetY, depth + 1);\r\n        } else {\r\n          visualizeSearch(node.right, x + offsetX, y + offsetY, depth + 1);\r\n        }\r\n      }, 1000);\r\n    };\r\n\r\n    if (tree) {\r\n      drawTree(tree, width / 2, 50, 1); // Малюємо дерево\r\n      if (searchValue !== null && !isNaN(searchValue)) {\r\n        visualizeSearch(tree, width / 2, 50, 1); // Візуалізуємо пошук\r\n      }\r\n    }\r\n  }, [tree, searchValue]);\r\n\r\n  return <svg ref={svgRef}></svg>;\r\n};\r\n\r\nexport default BSTVisualizer;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,KAAKC,EAAE,MAAM,IAAI;AACxB,OAAO,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,MAAMC,aAAa,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EAC/C,MAAMC,MAAM,GAAGR,MAAM,CAAC,CAAC;EAEvBD,SAAS,CAAC,MAAM;IACd,MAAMU,GAAG,GAAGR,EAAE,CAACS,MAAM,CAACF,MAAM,CAACG,OAAO,CAAC;IACrC,MAAMC,KAAK,GAAG,GAAG;IACjB,MAAMC,MAAM,GAAG,GAAG;;IAElB;IACAJ,GAAG,CAACK,SAAS,CAAC,GAAG,CAAC,CAACC,MAAM,CAAC,CAAC;IAE3BN,GAAG,CACAO,IAAI,CAAC,OAAO,EAAEJ,KAAK,CAAC,CACpBI,IAAI,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACtBI,KAAK,CAAC,YAAY,EAAE,SAAS,CAAC,CAC9BA,KAAK,CAAC,QAAQ,EAAE,gBAAgB,CAAC;IAEpC,MAAMC,QAAQ,GAAGA,CAACC,IAAI,EAAEC,CAAC,EAAEC,CAAC,EAAEC,KAAK,KAAK;MACtC,IAAI,CAACH,IAAI,EAAE;MAEX,MAAMI,OAAO,GAAG,GAAG,IAAID,KAAK,GAAG,CAAC,CAAC;MACjC,MAAME,OAAO,GAAG,EAAE;;MAElB;MACA,IAAIL,IAAI,CAACM,IAAI,EAAE;QACbhB,GAAG,CACAiB,MAAM,CAAC,MAAM,CAAC,CACdV,IAAI,CAAC,IAAI,EAAEI,CAAC,CAAC,CACbJ,IAAI,CAAC,IAAI,EAAEK,CAAC,CAAC,CACbL,IAAI,CAAC,IAAI,EAAEI,CAAC,GAAGG,OAAO,CAAC,CACvBP,IAAI,CAAC,IAAI,EAAEK,CAAC,GAAGG,OAAO,CAAC,CACvBR,IAAI,CAAC,QAAQ,EAAE,SAAS,CAAC,CACzBA,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;QAE1BE,QAAQ,CAACC,IAAI,CAACM,IAAI,EAAEL,CAAC,GAAGG,OAAO,EAAEF,CAAC,GAAGG,OAAO,EAAEF,KAAK,GAAG,CAAC,CAAC;MAC1D;MAEA,IAAIH,IAAI,CAACQ,KAAK,EAAE;QACdlB,GAAG,CACAiB,MAAM,CAAC,MAAM,CAAC,CACdV,IAAI,CAAC,IAAI,EAAEI,CAAC,CAAC,CACbJ,IAAI,CAAC,IAAI,EAAEK,CAAC,CAAC,CACbL,IAAI,CAAC,IAAI,EAAEI,CAAC,GAAGG,OAAO,CAAC,CACvBP,IAAI,CAAC,IAAI,EAAEK,CAAC,GAAGG,OAAO,CAAC,CACvBR,IAAI,CAAC,QAAQ,EAAE,SAAS,CAAC,CACzBA,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;QAE1BE,QAAQ,CAACC,IAAI,CAACQ,KAAK,EAAEP,CAAC,GAAGG,OAAO,EAAEF,CAAC,GAAGG,OAAO,EAAEF,KAAK,GAAG,CAAC,CAAC;MAC3D;;MAEA;MACAb,GAAG,CACAiB,MAAM,CAAC,QAAQ,CAAC,CAChBV,IAAI,CAAC,IAAI,EAAEI,CAAC,CAAC,CACbJ,IAAI,CAAC,IAAI,EAAEK,CAAC,CAAC,CACbL,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,CACbA,IAAI,CAAC,MAAM,EAAEG,IAAI,CAACS,KAAK,KAAKtB,WAAW,GAAG,SAAS,GAAG,SAAS,CAAC,CAAC;MAAA,CACjEU,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,CACtBA,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;;MAE1B;MACAP,GAAG,CACAiB,MAAM,CAAC,MAAM,CAAC,CACdV,IAAI,CAAC,GAAG,EAAEI,CAAC,CAAC,CACZJ,IAAI,CAAC,GAAG,EAAEK,CAAC,GAAG,CAAC,CAAC,CAChBL,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,CAC7BA,IAAI,CAAC,WAAW,EAAE,MAAM,CAAC,CACzBA,IAAI,CAAC,aAAa,EAAE,MAAM,CAAC,CAC3Ba,IAAI,CAACV,IAAI,CAACS,KAAK,CAAC;IACrB,CAAC;IAED,MAAME,eAAe,GAAGA,CAACX,IAAI,EAAEC,CAAC,EAAEC,CAAC,EAAEC,KAAK,KAAK;MAC7C,IAAI,CAACH,IAAI,EAAE;MAEX,MAAMI,OAAO,GAAG,GAAG,IAAID,KAAK,GAAG,CAAC,CAAC;MACjC,MAAME,OAAO,GAAG,EAAE;;MAElB;MACAf,GAAG,CACAiB,MAAM,CAAC,QAAQ,CAAC,CAChBV,IAAI,CAAC,IAAI,EAAEI,CAAC,CAAC,CACbJ,IAAI,CAAC,IAAI,EAAEK,CAAC,CAAC,CACbL,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,CACbA,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;MAAA,CACrBA,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,CACtBA,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;;MAE1B;MACA,IAAIG,IAAI,CAACS,KAAK,KAAKtB,WAAW,EAAE;;MAEhC;MACAyB,UAAU,CAAC,MAAM;QACf,IAAIzB,WAAW,GAAGa,IAAI,CAACS,KAAK,EAAE;UAC5BE,eAAe,CAACX,IAAI,CAACM,IAAI,EAAEL,CAAC,GAAGG,OAAO,EAAEF,CAAC,GAAGG,OAAO,EAAEF,KAAK,GAAG,CAAC,CAAC;QACjE,CAAC,MAAM;UACLQ,eAAe,CAACX,IAAI,CAACQ,KAAK,EAAEP,CAAC,GAAGG,OAAO,EAAEF,CAAC,GAAGG,OAAO,EAAEF,KAAK,GAAG,CAAC,CAAC;QAClE;MACF,CAAC,EAAE,IAAI,CAAC;IACV,CAAC;IAED,IAAIjB,IAAI,EAAE;MACRa,QAAQ,CAACb,IAAI,EAAEO,KAAK,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;MAClC,IAAIN,WAAW,KAAK,IAAI,IAAI,CAAC0B,KAAK,CAAC1B,WAAW,CAAC,EAAE;QAC/CwB,eAAe,CAACzB,IAAI,EAAEO,KAAK,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;MAC3C;IACF;EACF,CAAC,EAAE,CAACP,IAAI,EAAEC,WAAW,CAAC,CAAC;EAEvB,oBAAOH,OAAA;IAAK8B,GAAG,EAAEzB;EAAO;IAAA0B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AACjC,CAAC;AAAC9B,EAAA,CA7GIH,aAAa;AAAAkC,EAAA,GAAblC,aAAa;AA+GnB,eAAeA,aAAa;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}