{"ast":null,"code":"var _jsxFileName = \"d:\\\\coursework\\\\src\\\\components\\\\GraphInput.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport \"../styles/GraphInput.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphInput = () => {\n  _s();\n  const [vertices, setVertices] = useState(0);\n  const [matrix, setMatrix] = useState([]);\n  const [graphData, setGraphData] = useState({\n    nodes: [],\n    links: []\n  });\n  const [maxFlowResult, setMaxFlowResult] = useState(null);\n  const [isPaused, setIsPaused] = useState(false);\n  const svgRef = useRef(null);\n  const simulationRef = useRef(null);\n  const generateGraph = () => {\n    const numVertices = vertices;\n    let adjMatrix = Array.from({\n      length: numVertices\n    }, () => Array.from({\n      length: numVertices\n    }, () => 0));\n    let generatedWeights = [];\n    for (let i = 0; i < numVertices; i++) {\n      for (let j = i + 1; j < numVertices; j++) {\n        const hasEdge = Math.random() > 0.1; // 50% шанс на наявність ребра\n        if (hasEdge) {\n          const weight = Math.floor(Math.random() * 10) + 1; // Вага від 1 до 10\n          adjMatrix[i][j] = adjMatrix[j][i] = weight; // Вказуємо наявність ребра і його вагу\n          generatedWeights.push({\n            from: i,\n            to: j,\n            weight\n          });\n        }\n      }\n    }\n    setMatrix(adjMatrix);\n    setGraphData(generateGraphData(numVertices, adjMatrix));\n  };\n  const generateGraphData = (numVertices, adjMatrix) => {\n    const nodes = Array.from({\n      length: numVertices\n    }, (_, index) => ({\n      id: index,\n      x: Math.random() * 600,\n      y: Math.random() * 600\n    }));\n    const links = [];\n    adjMatrix.forEach((row, i) => {\n      row.forEach((weight, j) => {\n        if (weight > 0 && i < j) {\n          links.push({\n            source: i,\n            target: j,\n            weight\n          });\n        }\n      });\n    });\n    return {\n      nodes,\n      links\n    };\n  };\n  const fordFulkerson = (graph, source, sink) => {\n    const residualGraph = graph.map(row => [...row]);\n    const parent = Array(graph.length).fill(-1);\n    let maxFlow = 0;\n    const bfs = () => {\n      const visited = Array(graph.length).fill(false);\n      const queue = [];\n      queue.push(source);\n      visited[source] = true;\n      while (queue.length > 0) {\n        const currentNode = queue.shift();\n        for (let i = 0; i < graph.length; i++) {\n          if (!visited[i] && residualGraph[currentNode][i] > 0) {\n            parent[i] = currentNode;\n            queue.push(i);\n            visited[i] = true;\n            if (i === sink) {\n              return true;\n            }\n          }\n        }\n      }\n      return false;\n    };\n    while (bfs()) {\n      let pathFlow = Infinity;\n      let v = sink;\n      while (v !== source) {\n        const u = parent[v];\n        pathFlow = Math.min(pathFlow, residualGraph[u][v]);\n        v = u;\n      }\n      v = sink;\n      while (v !== source) {\n        const u = parent[v];\n        residualGraph[u][v] -= pathFlow;\n        residualGraph[v][u] += pathFlow;\n        v = u;\n      }\n      maxFlow += pathFlow;\n    }\n    return maxFlow;\n  };\n  const runAlgorithm = () => {\n    const source = 0; // Початкова вершина\n    const sink = vertices - 1; // Кінцева вершина\n    const result = fordFulkerson(matrix, source, sink);\n    setMaxFlowResult(result);\n  };\n  const handleStartClick = () => {\n    if (vertices > 0 && vertices <= 15) {\n      generateGraph();\n    }\n  };\n  const handlePauseClick = () => {\n    const svg = d3.select(svgRef.current);\n    const simulation = simulationRef.current;\n    if (isPaused) {\n      // Відновлення симуляції\n      simulation.alpha(1).restart();\n      svg.selectAll('.node').transition().duration(5000).attr(\"opacity\", 1); // Відновлення анімацій для вузлів\n\n      svg.selectAll('.link').transition().duration(5000).attr(\"opacity\", 1); // Відновлення анімацій для зв'язків\n\n      svg.selectAll('.node-text').transition().duration(3500).attr(\"opacity\", 1); // Відновлення анімацій для тексту\n    } else {\n      // Зупинка симуляції\n      simulation.stop();\n      svg.selectAll('.node').interrupt(); // Зупинка всіх анімацій для вузлів\n      svg.selectAll('.link').interrupt(); // Зупинка всіх анімацій для зв'язків\n\n      svg.selectAll('.node-text').interrupt() // Зупинка анімацій для тексту\n      .attr(\"opacity\", 0); // Сховати текст при паузі\n    }\n    setIsPaused(!isPaused);\n  };\n  const handleAddVertex = () => {\n    const newVertexIndex = vertices; // Індекс нової вершини\n    setVertices(prevVertices => prevVertices + 1);\n\n    // Додаємо нову вершину до даних графу\n    const newNode = {\n      id: newVertexIndex,\n      x: Math.random() * 600,\n      // Випадкова позиція x\n      y: Math.random() * 600 // Випадкова позиція y\n    };\n    setGraphData(prevData => ({\n      nodes: [...prevData.nodes, newNode],\n      // Додаємо нову вершину\n      links: [...prevData.links] // Зберігаємо існуючі ребра\n    }));\n\n    // Оновлюємо матрицю суміжності\n    const newAdjMatrix = [...matrix];\n    // Додаємо нові нулі (без з'єднання) для нової вершини\n    newAdjMatrix.forEach(row => row.push(0));\n    newAdjMatrix.push(Array(newAdjMatrix.length + 1).fill(0));\n\n    // Генерація випадкових ребер для нової вершини\n    for (let i = 0; i < newAdjMatrix.length - 1; i++) {\n      const hasEdge = Math.random() > 0.5; // 50% шанс на наявність ребра\n      if (hasEdge) {\n        const weight = Math.floor(Math.random() * 10) + 1; // Вага від 1 до 10\n        newAdjMatrix[i][newAdjMatrix.length - 1] = weight; // Вага ребра\n        newAdjMatrix[newAdjMatrix.length - 1][i] = weight; // Вага ребра\n        setGraphData(prevData => ({\n          nodes: prevData.nodes,\n          links: [...prevData.links, {\n            source: i,\n            target: newAdjMatrix.length - 1,\n            weight\n          }]\n        }));\n      }\n    }\n    setMatrix(newAdjMatrix); // Оновлюємо матрицю\n  };\n  const handleRemoveVertex = () => {\n    if (vertices > 0) {\n      const vertexToRemove = vertices - 1; // Останній доданий індекс вершини\n      setVertices(prevVertices => prevVertices - 1);\n\n      // Оновлюємо дані графа\n      const updatedNodes = graphData.nodes.filter(node => node.id !== vertexToRemove);\n\n      // Оновлюємо ребра: видаляємо всі, де source або target є видаленою вершиною\n      const updatedLinks = graphData.links.filter(link => link.source.id !== vertexToRemove && link.target.id !== vertexToRemove);\n\n      // Оновлюємо граф\n      setGraphData({\n        nodes: updatedNodes,\n        links: updatedLinks\n      });\n\n      // Оновлюємо матрицю суміжності\n      const updatedMatrix = matrix.map(row => row.filter((_, colIndex) => colIndex !== vertexToRemove)) // Видалити стовпці\n      .filter((_, rowIndex) => rowIndex !== vertexToRemove); // Видалити рядок\n      setMatrix(updatedMatrix);\n\n      // Видаляємо відповідні SVG елементи\n      const svg = d3.select(svgRef.current);\n\n      // Видалення ребер\n      svg.selectAll(\".link\").data(updatedLinks).exit().remove(); // Видалити лінії, пов'язані з видаленою вершиною\n\n      // Видалення вершини\n      svg.selectAll(\".node\").data(updatedNodes).exit().remove(); // Видалити старі елементи node\n\n      // Видалення тексту (цифри)\n      svg.selectAll(\".node-text\").data(updatedNodes).exit().remove(); // Видалити старі текстові елементи\n\n      // Оновлення симуляції\n      const simulation = d3.forceSimulation(updatedNodes).force(\"link\", d3.forceLink(updatedLinks).id(d => d.id).distance(100)).force(\"charge\", d3.forceManyBody()).force(\"center\", d3.forceCenter(600 / 2, 600 / 2));\n      simulation.on(\"tick\", () => {\n        svg.selectAll(\".link\").attr(\"x1\", d => d.source.x).attr(\"y1\", d => d.source.y).attr(\"x2\", d => d.target.x).attr(\"y2\", d => d.target.y);\n        svg.selectAll(\".node\").attr(\"cx\", d => d.x).attr(\"cy\", d => d.y);\n        svg.selectAll(\".node-text\").attr(\"x\", d => d.x).attr(\"y\", d => d.y);\n      });\n    }\n  };\n  const handleClearTree = () => {\n    setVertices(0); // Скидаємо кількість вершин\n    setMatrix([]); // Скидаємо матрицю суміжності\n    setGraphData({\n      nodes: [],\n      links: []\n    }); // Очищаємо дані графа\n    setMaxFlowResult(null); // Очищаємо результат максимального потоку\n    const svg = d3.select(svgRef.current);\n    svg.selectAll(\"*\").remove(); // Видаляємо всі елементи SVG\n  };\n  useEffect(() => {\n    if (matrix.length === 0 || vertices === 0) return;\n    const svg = d3.select(svgRef.current).attr(\"width\", 600).attr(\"height\", 600);\n    const width = 600;\n    const height = 600;\n    const radius = 8;\n    const simulation = d3.forceSimulation(graphData.nodes).force(\"link\", d3.forceLink(graphData.links).id(d => d.id).distance(100)).force(\"charge\", d3.forceManyBody()).force(\"center\", d3.forceCenter(width / 2, height / 2));\n    simulationRef.current = simulation; // Store the simulation reference\n\n    const linkElements = svg.selectAll(\".link\").data(graphData.links).enter().append(\"line\").attr(\"class\", \"link\").attr(\"stroke-width\", d => d.weight).attr(\"opacity\", 0);\n    const nodeElements = svg.selectAll(\".node\").data(graphData.nodes).enter().append(\"circle\").attr(\"class\", \"node\").attr(\"r\", radius).attr(\"cx\", d => d.x).attr(\"cy\", d => d.y).attr(\"opacity\", 0).call(d3.drag().on(\"start\", dragstarted).on(\"drag\", dragged).on(\"end\", dragended));\n    nodeElements.each(function (d, i) {\n      d3.select(this).transition().delay(i * 300).duration(5000).attr(\"opacity\", 1);\n    });\n    linkElements.each(function (d, i) {\n      d3.select(this).transition().delay(i * 500 + graphData.nodes.length * 300).duration(5000).attr(\"opacity\", 1);\n    });\n    svg.selectAll(\".node-text\").data(graphData.nodes).enter().append(\"text\").attr(\"class\", \"node-text\").attr(\"x\", d => d.x).attr(\"y\", d => d.y).attr(\"dy\", -10).attr(\"text-anchor\", \"middle\").text(d => d.id).attr(\"opacity\", 0).transition().delay(graphData.nodes.length * 300 + 4000).duration(3500).attr(\"opacity\", 1);\n    simulation.on(\"tick\", () => {\n      svg.selectAll(\".link\").attr(\"x1\", d => d.source.x).attr(\"y1\", d => d.source.y).attr(\"x2\", d => d.target.x).attr(\"y2\", d => d.target.y);\n      svg.selectAll(\".node\").attr(\"cx\", d => d.x).attr(\"cy\", d => d.y);\n      svg.selectAll(\".node-text\").attr(\"x\", d => d.x).attr(\"y\", d => d.y);\n    });\n    function dragstarted(event) {\n      if (!event.active) simulation.alphaTarget(0.3).restart();\n      event.subject.fx = event.subject.x;\n      event.subject.fy = event.subject.y;\n    }\n    function dragged(event) {\n      event.subject.fx = event.x;\n      event.subject.fy = event.y;\n    }\n    function dragended(event) {\n      if (!event.active) simulation.alphaTarget(0);\n      event.subject.fx = null;\n      event.subject.fy = null;\n    }\n  }, [matrix, vertices]);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    id: \"input-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u0412\\u0432\\u0435\\u0434\\u0435\\u043D\\u043D\\u044F \\u0433\\u0440\\u0430\\u0444\\u0443\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"vertices\",\n      children: \"\\u041A\\u0456\\u043B\\u044C\\u043A\\u0456\\u0441\\u0442\\u044C \\u0432\\u0435\\u0440\\u0448\\u0438\\u043D (\\u043C\\u0430\\u043A\\u0441 15):\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      id: \"vertices\",\n      value: vertices,\n      onChange: e => setVertices(parseInt(e.target.value, 10)),\n      min: \"1\",\n      max: \"15\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: handleStartClick,\n      children: \"\\u0421\\u0442\\u0430\\u0440\\u0442\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: handlePauseClick,\n      children: isPaused ? \"Продовжити\" : \"Пауза\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: runAlgorithm,\n      children: \"\\u041C\\u0430\\u043A\\u0441\\u0438\\u043C\\u0430\\u043B\\u044C\\u043D\\u0438\\u0439 \\u043F\\u043E\\u0442\\u0456\\u043A\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: handleAddVertex,\n      children: \"\\u0414\\u043E\\u0434\\u0430\\u0442\\u0438 \\u0432\\u0435\\u0440\\u0448\\u0438\\u043D\\u0443\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: handleRemoveVertex,\n      children: \"\\u0412\\u0438\\u0434\\u0430\\u043B\\u0438\\u0442\\u0438 \\u043E\\u0441\\u0442\\u0430\\u043D\\u043D\\u044E \\u0432\\u0435\\u0440\\u0448\\u0438\\u043D\\u0443\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: handleClearTree,\n      children: \"\\u041E\\u0447\\u0438\\u0441\\u0442\\u0438\\u0442\\u0438 \\u0434\\u0435\\u0440\\u0435\\u0432\\u043E\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 13\n    }, this), maxFlowResult !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\u0420\\u0435\\u0437\\u0443\\u043B\\u044C\\u0442\\u0430\\u0442:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u041C\\u0430\\u043A\\u0441\\u0438\\u043C\\u0430\\u043B\\u044C\\u043D\\u0438\\u0439 \\u043F\\u043E\\u0442\\u0456\\u043A: \", maxFlowResult]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 17\n    }, this), matrix.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\u041C\\u0430\\u0442\\u0440\\u0438\\u0446\\u044F \\u0441\\u0443\\u043C\\u0456\\u0436\\u043D\\u043E\\u0441\\u0442\\u0456\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 408,\n              columnNumber: 33\n            }, this), Array.from({\n              length: vertices\n            }, (_, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n              children: index\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 410,\n              columnNumber: 37\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 407,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: matrix.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: rowIndex\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 417,\n              columnNumber: 37\n            }, this), row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n              children: cell\n            }, colIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 419,\n              columnNumber: 41\n            }, this))]\n          }, rowIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 375,\n    columnNumber: 9\n  }, this);\n};\n_s(GraphInput, \"//DTvGUInkPyPDxsHZCeHAJJdJY=\");\n_c = GraphInput;\nexport default GraphInput;\nvar _c;\n$RefreshReg$(_c, \"GraphInput\");","map":{"version":3,"names":["React","useState","useEffect","useRef","d3","jsxDEV","_jsxDEV","GraphInput","_s","vertices","setVertices","matrix","setMatrix","graphData","setGraphData","nodes","links","maxFlowResult","setMaxFlowResult","isPaused","setIsPaused","svgRef","simulationRef","generateGraph","numVertices","adjMatrix","Array","from","length","generatedWeights","i","j","hasEdge","Math","random","weight","floor","push","to","generateGraphData","_","index","id","x","y","forEach","row","source","target","fordFulkerson","graph","sink","residualGraph","map","parent","fill","maxFlow","bfs","visited","queue","currentNode","shift","pathFlow","Infinity","v","u","min","runAlgorithm","result","handleStartClick","handlePauseClick","svg","select","current","simulation","alpha","restart","selectAll","transition","duration","attr","stop","interrupt","handleAddVertex","newVertexIndex","prevVertices","newNode","prevData","newAdjMatrix","handleRemoveVertex","vertexToRemove","updatedNodes","filter","node","updatedLinks","link","updatedMatrix","colIndex","rowIndex","data","exit","remove","forceSimulation","force","forceLink","d","distance","forceManyBody","forceCenter","on","handleClearTree","width","height","radius","linkElements","enter","append","nodeElements","call","drag","dragstarted","dragged","dragended","each","delay","text","event","active","alphaTarget","subject","fx","fy","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","value","onChange","e","parseInt","max","required","onClick","className","cell","ref","_c","$RefreshReg$"],"sources":["d:/coursework/src/components/GraphInput.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport \"../styles/GraphInput.css\";\r\n\r\nconst GraphInput = () => {\r\n    const [vertices, setVertices] = useState(0);\r\n    const [matrix, setMatrix] = useState([]);\r\n    const [graphData, setGraphData] = useState({ nodes: [], links: [] });\r\n    const [maxFlowResult, setMaxFlowResult] = useState(null);\r\n    const [isPaused, setIsPaused] = useState(false);\r\n    const svgRef = useRef(null);\r\n    const simulationRef = useRef(null); \r\n\r\n    const generateGraph = () => {\r\n        const numVertices = vertices;\r\n        let adjMatrix = Array.from({ length: numVertices }, () =>\r\n            Array.from({ length: numVertices }, () => 0)\r\n        );\r\n        let generatedWeights = [];\r\n\r\n        for (let i = 0; i < numVertices; i++) {\r\n            for (let j = i + 1; j < numVertices; j++) {\r\n                const hasEdge = Math.random() > 0.1; // 50% шанс на наявність ребра\r\n                if (hasEdge) {\r\n                    const weight = Math.floor(Math.random() * 10) + 1; // Вага від 1 до 10\r\n                    adjMatrix[i][j] = adjMatrix[j][i] = weight; // Вказуємо наявність ребра і його вагу\r\n                    generatedWeights.push({ from: i, to: j, weight });\r\n                }\r\n            }\r\n        }\r\n\r\n        setMatrix(adjMatrix);\r\n        setGraphData(generateGraphData(numVertices, adjMatrix));\r\n    };\r\n\r\n    const generateGraphData = (numVertices, adjMatrix) => {\r\n        const nodes = Array.from({ length: numVertices }, (_, index) => ({\r\n            id: index,\r\n            x: Math.random() * 600,\r\n            y: Math.random() * 600,\r\n        }));\r\n\r\n        const links = [];\r\n        adjMatrix.forEach((row, i) => {\r\n            row.forEach((weight, j) => {\r\n                if (weight > 0 && i < j) {\r\n                    links.push({ source: i, target: j, weight });\r\n                }\r\n            });\r\n        });\r\n\r\n        return { nodes, links };\r\n    };\r\n\r\n    const fordFulkerson = (graph, source, sink) => {\r\n        const residualGraph = graph.map((row) => [...row]);\r\n        const parent = Array(graph.length).fill(-1);\r\n        let maxFlow = 0;\r\n\r\n        const bfs = () => {\r\n            const visited = Array(graph.length).fill(false);\r\n            const queue = [];\r\n            queue.push(source);\r\n            visited[source] = true;\r\n\r\n            while (queue.length > 0) {\r\n                const currentNode = queue.shift();\r\n\r\n                for (let i = 0; i < graph.length; i++) {\r\n                    if (!visited[i] && residualGraph[currentNode][i] > 0) {\r\n                        parent[i] = currentNode;\r\n                        queue.push(i);\r\n                        visited[i] = true;\r\n\r\n                        if (i === sink) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return false;\r\n        };\r\n\r\n        while (bfs()) {\r\n            let pathFlow = Infinity;\r\n            let v = sink;\r\n\r\n            while (v !== source) {\r\n                const u = parent[v];\r\n                pathFlow = Math.min(pathFlow, residualGraph[u][v]);\r\n                v = u;\r\n            }\r\n\r\n            v = sink;\r\n            while (v !== source) {\r\n                const u = parent[v];\r\n                residualGraph[u][v] -= pathFlow;\r\n                residualGraph[v][u] += pathFlow;\r\n                v = u;\r\n            }\r\n\r\n            maxFlow += pathFlow;\r\n        }\r\n\r\n        return maxFlow;\r\n    };\r\n\r\n    const runAlgorithm = () => {\r\n        const source = 0; // Початкова вершина\r\n        const sink = vertices - 1; // Кінцева вершина\r\n        const result = fordFulkerson(matrix, source, sink);\r\n        setMaxFlowResult(result);\r\n    };\r\n\r\n    const handleStartClick = () => {\r\n        if (vertices > 0 && vertices <= 15) {\r\n            generateGraph();\r\n        }\r\n    };\r\n\r\n    const handlePauseClick = () => {\r\n        const svg = d3.select(svgRef.current);\r\n        const simulation = simulationRef.current;\r\n    \r\n        if (isPaused) {\r\n            // Відновлення симуляції\r\n            simulation.alpha(1).restart(); \r\n    \r\n            svg.selectAll('.node')\r\n                .transition()\r\n                .duration(5000)\r\n                .attr(\"opacity\", 1); // Відновлення анімацій для вузлів\r\n    \r\n            svg.selectAll('.link')\r\n                .transition()\r\n                .duration(5000)\r\n                .attr(\"opacity\", 1); // Відновлення анімацій для зв'язків\r\n    \r\n            svg.selectAll('.node-text')\r\n                .transition()\r\n                .duration(3500)\r\n                .attr(\"opacity\", 1); // Відновлення анімацій для тексту\r\n        } else {\r\n            // Зупинка симуляції\r\n            simulation.stop(); \r\n    \r\n            svg.selectAll('.node').interrupt(); // Зупинка всіх анімацій для вузлів\r\n            svg.selectAll('.link').interrupt(); // Зупинка всіх анімацій для зв'язків\r\n    \r\n            svg.selectAll('.node-text')\r\n                .interrupt() // Зупинка анімацій для тексту\r\n                .attr(\"opacity\", 0); // Сховати текст при паузі\r\n        }\r\n    \r\n        setIsPaused(!isPaused);\r\n    };\r\n    \r\n\r\n    const handleAddVertex = () => {\r\n        const newVertexIndex = vertices; // Індекс нової вершини\r\n        setVertices(prevVertices => prevVertices + 1);\r\n    \r\n        // Додаємо нову вершину до даних графу\r\n        const newNode = {\r\n            id: newVertexIndex,\r\n            x: Math.random() * 600, // Випадкова позиція x\r\n            y: Math.random() * 600  // Випадкова позиція y\r\n        };\r\n        setGraphData(prevData => ({\r\n            nodes: [...prevData.nodes, newNode], // Додаємо нову вершину\r\n            links: [...prevData.links], // Зберігаємо існуючі ребра\r\n        }));\r\n    \r\n        // Оновлюємо матрицю суміжності\r\n        const newAdjMatrix = [...matrix];\r\n        // Додаємо нові нулі (без з'єднання) для нової вершини\r\n        newAdjMatrix.forEach(row => row.push(0)); \r\n        newAdjMatrix.push(Array(newAdjMatrix.length + 1).fill(0)); \r\n    \r\n        // Генерація випадкових ребер для нової вершини\r\n        for (let i = 0; i < newAdjMatrix.length - 1; i++) {\r\n            const hasEdge = Math.random() > 0.5; // 50% шанс на наявність ребра\r\n            if (hasEdge) {\r\n                const weight = Math.floor(Math.random() * 10) + 1; // Вага від 1 до 10\r\n                newAdjMatrix[i][newAdjMatrix.length - 1] = weight; // Вага ребра\r\n                newAdjMatrix[newAdjMatrix.length - 1][i] = weight; // Вага ребра\r\n                setGraphData(prevData => ({\r\n                    nodes: prevData.nodes,\r\n                    links: [...prevData.links, { source: i, target: newAdjMatrix.length - 1, weight }]\r\n                }));\r\n            }\r\n        }\r\n    \r\n        setMatrix(newAdjMatrix); // Оновлюємо матрицю\r\n    };\r\n\r\n    const handleRemoveVertex = () => {\r\n        if (vertices > 0) {\r\n            const vertexToRemove = vertices - 1; // Останній доданий індекс вершини\r\n            setVertices(prevVertices => prevVertices - 1);\r\n    \r\n            // Оновлюємо дані графа\r\n            const updatedNodes = graphData.nodes.filter((node) => node.id !== vertexToRemove);\r\n    \r\n            // Оновлюємо ребра: видаляємо всі, де source або target є видаленою вершиною\r\n            const updatedLinks = graphData.links.filter(\r\n                (link) => link.source.id !== vertexToRemove && link.target.id !== vertexToRemove\r\n            );\r\n    \r\n            // Оновлюємо граф\r\n            setGraphData({ nodes: updatedNodes, links: updatedLinks });\r\n    \r\n            // Оновлюємо матрицю суміжності\r\n            const updatedMatrix = matrix\r\n                .map((row) => row.filter((_, colIndex) => colIndex !== vertexToRemove)) // Видалити стовпці\r\n                .filter((_, rowIndex) => rowIndex !== vertexToRemove); // Видалити рядок\r\n            setMatrix(updatedMatrix);\r\n    \r\n            // Видаляємо відповідні SVG елементи\r\n            const svg = d3.select(svgRef.current);\r\n    \r\n            // Видалення ребер\r\n            svg.selectAll(\".link\")\r\n                .data(updatedLinks)\r\n                .exit().remove(); // Видалити лінії, пов'язані з видаленою вершиною\r\n    \r\n            // Видалення вершини\r\n            svg.selectAll(\".node\")\r\n                .data(updatedNodes)\r\n                .exit().remove(); // Видалити старі елементи node\r\n    \r\n            // Видалення тексту (цифри)\r\n            svg.selectAll(\".node-text\")\r\n                .data(updatedNodes)\r\n                .exit().remove(); // Видалити старі текстові елементи\r\n    \r\n            // Оновлення симуляції\r\n            const simulation = d3.forceSimulation(updatedNodes)\r\n                .force(\"link\", d3.forceLink(updatedLinks).id(d => d.id).distance(100))\r\n                .force(\"charge\", d3.forceManyBody())\r\n                .force(\"center\", d3.forceCenter(600 / 2, 600 / 2));\r\n    \r\n            simulation.on(\"tick\", () => {\r\n                svg.selectAll(\".link\")\r\n                    .attr(\"x1\", d => d.source.x)\r\n                    .attr(\"y1\", d => d.source.y)\r\n                    .attr(\"x2\", d => d.target.x)\r\n                    .attr(\"y2\", d => d.target.y);\r\n    \r\n                svg.selectAll(\".node\")\r\n                    .attr(\"cx\", d => d.x)\r\n                    .attr(\"cy\", d => d.y);\r\n    \r\n                svg.selectAll(\".node-text\")\r\n                    .attr(\"x\", d => d.x)\r\n                    .attr(\"y\", d => d.y);\r\n            });\r\n        }\r\n    };\r\n    \r\n    const handleClearTree = () => {\r\n        setVertices(0); // Скидаємо кількість вершин\r\n        setMatrix([]); // Скидаємо матрицю суміжності\r\n        setGraphData({ nodes: [], links: [] }); // Очищаємо дані графа\r\n        setMaxFlowResult(null); // Очищаємо результат максимального потоку\r\n        const svg = d3.select(svgRef.current);\r\n        svg.selectAll(\"*\").remove(); // Видаляємо всі елементи SVG\r\n    };\r\n    useEffect(() => {\r\n        if (matrix.length === 0 || vertices === 0) return;\r\n\r\n        const svg = d3.select(svgRef.current)\r\n            .attr(\"width\", 600)\r\n            .attr(\"height\", 600);\r\n\r\n        const width = 600;\r\n        const height = 600;\r\n        const radius = 8;\r\n\r\n        const simulation = d3.forceSimulation(graphData.nodes)\r\n            .force(\"link\", d3.forceLink(graphData.links).id(d => d.id).distance(100))\r\n            .force(\"charge\", d3.forceManyBody())\r\n            .force(\"center\", d3.forceCenter(width / 2, height / 2));\r\n\r\n        simulationRef.current = simulation; // Store the simulation reference\r\n\r\n        const linkElements = svg.selectAll(\".link\")\r\n            .data(graphData.links)\r\n            .enter().append(\"line\")\r\n            .attr(\"class\", \"link\")\r\n            .attr(\"stroke-width\", d => d.weight)\r\n            .attr(\"opacity\", 0);\r\n\r\n        const nodeElements = svg.selectAll(\".node\")\r\n            .data(graphData.nodes)\r\n            .enter().append(\"circle\")\r\n            .attr(\"class\", \"node\")\r\n            .attr(\"r\", radius)\r\n            .attr(\"cx\", d => d.x)\r\n            .attr(\"cy\", d => d.y)\r\n            .attr(\"opacity\", 0)\r\n            .call(d3.drag()\r\n                .on(\"start\", dragstarted)\r\n                .on(\"drag\", dragged)\r\n                .on(\"end\", dragended));\r\n\r\n        nodeElements.each(function(d, i) {\r\n            d3.select(this)\r\n                .transition()\r\n                .delay(i * 300)\r\n                .duration(5000)\r\n                .attr(\"opacity\", 1);\r\n        });\r\n\r\n        linkElements.each(function(d, i) {\r\n            d3.select(this)\r\n                .transition()\r\n                .delay(i * 500 + graphData.nodes.length * 300)\r\n                .duration(5000)\r\n                .attr(\"opacity\", 1);\r\n        });\r\n\r\n        svg.selectAll(\".node-text\")\r\n            .data(graphData.nodes)\r\n            .enter().append(\"text\")\r\n            .attr(\"class\", \"node-text\")\r\n            .attr(\"x\", d => d.x)\r\n            .attr(\"y\", d => d.y)\r\n            .attr(\"dy\", -10)\r\n            .attr(\"text-anchor\", \"middle\")\r\n            .text(d => d.id)\r\n            .attr(\"opacity\", 0)\r\n            .transition()\r\n            .delay(graphData.nodes.length * 300 + 4000)\r\n            .duration(3500)\r\n            .attr(\"opacity\", 1);\r\n\r\n        simulation.on(\"tick\", () => {\r\n            svg.selectAll(\".link\")\r\n                .attr(\"x1\", d => d.source.x)\r\n                .attr(\"y1\", d => d.source.y)\r\n                .attr(\"x2\", d => d.target.x)\r\n                .attr(\"y2\", d => d.target.y);\r\n\r\n            svg.selectAll(\".node\")\r\n                .attr(\"cx\", d => d.x)\r\n                .attr(\"cy\", d => d.y);\r\n\r\n            svg.selectAll(\".node-text\")\r\n                .attr(\"x\", d => d.x)\r\n                .attr(\"y\", d => d.y);\r\n        });\r\n\r\n        function dragstarted(event) {\r\n            if (!event.active) simulation.alphaTarget(0.3).restart();\r\n            event.subject.fx = event.subject.x;\r\n            event.subject.fy = event.subject.y;\r\n        }\r\n\r\n        function dragged(event) {\r\n            event.subject.fx = event.x;\r\n            event.subject.fy = event.y;\r\n        }\r\n\r\n        function dragended(event) {\r\n            if (!event.active) simulation.alphaTarget(0);\r\n            event.subject.fx = null;\r\n            event.subject.fy = null;\r\n        }\r\n\r\n    }, [matrix, vertices]); \r\n\r\n    return (\r\n        <section id=\"input-section\">\r\n            <h2>Введення графу</h2>\r\n            <label htmlFor=\"vertices\">Кількість вершин (макс 15):</label>\r\n            <input\r\n                type=\"number\"\r\n                id=\"vertices\"\r\n                value={vertices}\r\n                onChange={(e) => setVertices(parseInt(e.target.value, 10))}\r\n                min=\"1\"\r\n                max=\"15\"\r\n                required\r\n            />\r\n            <button type=\"button\" onClick={handleStartClick}>Старт</button>\r\n            <button type=\"button\" onClick={handlePauseClick}>\r\n                {isPaused ? \"Продовжити\" : \"Пауза\"}\r\n            </button>\r\n            <button type=\"button\" onClick={runAlgorithm}>Максимальний потік</button>\r\n            <button type=\"button\" onClick={handleAddVertex}>Додати вершину</button>\r\n            <button type=\"button\" onClick={handleRemoveVertex}>Видалити останню вершину</button>\r\n            <button type=\"button\" onClick={handleClearTree}>Очистити дерево</button>\r\n            {maxFlowResult !== null && (\r\n                <div className=\"result\">\r\n                    <h3>Результат:</h3>\r\n                    <p>Максимальний потік: {maxFlowResult}</p>\r\n                </div>\r\n            )}\r\n            {/* Відображення матриці суміжності */}\r\n            {matrix.length > 0 && (\r\n                <div>\r\n                    <h3>Матриця суміжності</h3>\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th></th>\r\n                                {Array.from({ length: vertices }, (_, index) => (\r\n                                    <th key={index}>{index}</th>\r\n                                ))}\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {matrix.map((row, rowIndex) => (\r\n                                <tr key={rowIndex}>\r\n                                    <td>{rowIndex}</td>\r\n                                    {row.map((cell, colIndex) => (\r\n                                        <td key={colIndex}>{cell}</td>\r\n                                    ))}\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            )}\r\n\r\n            {/* SVG для побудови графу */}\r\n            <svg ref={svgRef}></svg>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default GraphInput;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}