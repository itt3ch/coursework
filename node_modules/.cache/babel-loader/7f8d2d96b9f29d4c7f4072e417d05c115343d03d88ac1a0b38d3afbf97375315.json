{"ast":null,"code":"var _jsxFileName = \"d:\\\\coursework\\\\src\\\\components\\\\Algorithms.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./../styles/Algorithms.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Algorithms = ({\n  matrix\n}) => {\n  _s();\n  const [maxFlowResult, setMaxFlowResult] = useState(null);\n  const fordFulkerson = (graph, source, sink) => {\n    const residualGraph = graph.map(row => [...row]);\n    const parent = Array(graph.length).fill(-1);\n    let maxFlow = 0;\n    const bfs = () => {\n      const visited = Array(graph.length).fill(false);\n      const queue = [];\n      queue.push(source);\n      visited[source] = true;\n      while (queue.length > 0) {\n        const currentNode = queue.shift();\n        for (let i = 0; i < graph.length; i++) {\n          if (!visited[i] && residualGraph[currentNode][i] > 0) {\n            parent[i] = currentNode;\n            queue.push(i);\n            visited[i] = true;\n            if (i === sink) {\n              return true;\n            }\n          }\n        }\n      }\n      return false;\n    };\n    while (bfs()) {\n      let pathFlow = Infinity;\n      let v = sink;\n      while (v !== source) {\n        const u = parent[v];\n        pathFlow = Math.min(pathFlow, residualGraph[u][v]);\n        v = u;\n      }\n      v = sink;\n      while (v !== source) {\n        const u = parent[v];\n        residualGraph[u][v] -= pathFlow;\n        residualGraph[v][u] += pathFlow;\n        v = u;\n      }\n      maxFlow += pathFlow;\n    }\n    return maxFlow;\n  };\n  const runAlgorithm = algorithm => {\n    if (algorithm === \"Максимальний потік\") {\n      const source = 0; // Початкова вершина\n      const sink = matrix.length - 1; // Кінцева вершина\n\n      const result = fordFulkerson(matrix, source, sink);\n      setMaxFlowResult(result);\n      console.log(`Результат: Максимальний потік = ${result}`);\n    } else {\n      console.log(\"Алгоритм ще не реалізовано\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    id: \"algorithms-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u0410\\u043B\\u0433\\u043E\\u0440\\u0438\\u0442\\u043C\\u0438\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => runAlgorithm(\"Максимальний потік\"),\n      children: \"\\u041C\\u0430\\u043A\\u0441\\u0438\\u043C\\u0430\\u043B\\u044C\\u043D\\u0438\\u0439 \\u043F\\u043E\\u0442\\u0456\\u043A\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => runAlgorithm(\"Мінімальний переріз\"),\n      children: \"\\u041C\\u0456\\u043D\\u0456\\u043C\\u0430\\u043B\\u044C\\u043D\\u0438\\u0439 \\u043F\\u0435\\u0440\\u0435\\u0440\\u0456\\u0437\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), maxFlowResult !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\u0420\\u0435\\u0437\\u0443\\u043B\\u044C\\u0442\\u0430\\u0442:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u041C\\u0430\\u043A\\u0441\\u0438\\u043C\\u0430\\u043B\\u044C\\u043D\\u0438\\u0439 \\u043F\\u043E\\u0442\\u0456\\u043A: \", maxFlowResult]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};\n_s(Algorithms, \"0lMSHz0NXM9IxT3mV5XNgu+MVxQ=\");\n_c = Algorithms;\nexport default Algorithms;\nvar _c;\n$RefreshReg$(_c, \"Algorithms\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Algorithms","matrix","_s","maxFlowResult","setMaxFlowResult","fordFulkerson","graph","source","sink","residualGraph","map","row","parent","Array","length","fill","maxFlow","bfs","visited","queue","push","currentNode","shift","i","pathFlow","Infinity","v","u","Math","min","runAlgorithm","algorithm","result","console","log","id","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","className","_c","$RefreshReg$"],"sources":["d:/coursework/src/components/Algorithms.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./../styles/Algorithms.css\";\r\n\r\nconst Algorithms = ({ matrix }) => {\r\n    const [maxFlowResult, setMaxFlowResult] = useState(null);\r\n\r\n    const fordFulkerson = (graph, source, sink) => {\r\n        const residualGraph = graph.map((row) => [...row]);\r\n        const parent = Array(graph.length).fill(-1);\r\n        let maxFlow = 0;\r\n\r\n        const bfs = () => {\r\n            const visited = Array(graph.length).fill(false);\r\n            const queue = [];\r\n            queue.push(source);\r\n            visited[source] = true;\r\n\r\n            while (queue.length > 0) {\r\n                const currentNode = queue.shift();\r\n\r\n                for (let i = 0; i < graph.length; i++) {\r\n                    if (!visited[i] && residualGraph[currentNode][i] > 0) {\r\n                        parent[i] = currentNode;\r\n                        queue.push(i);\r\n                        visited[i] = true;\r\n\r\n                        if (i === sink) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return false;\r\n        };\r\n\r\n        while (bfs()) {\r\n            let pathFlow = Infinity;\r\n            let v = sink;\r\n\r\n            while (v !== source) {\r\n                const u = parent[v];\r\n                pathFlow = Math.min(pathFlow, residualGraph[u][v]);\r\n                v = u;\r\n            }\r\n\r\n            v = sink;\r\n            while (v !== source) {\r\n                const u = parent[v];\r\n                residualGraph[u][v] -= pathFlow;\r\n                residualGraph[v][u] += pathFlow;\r\n                v = u;\r\n            }\r\n\r\n            maxFlow += pathFlow;\r\n        }\r\n\r\n        return maxFlow;\r\n    };\r\n\r\n    const runAlgorithm = (algorithm) => {\r\n        if (algorithm === \"Максимальний потік\") {\r\n            const source = 0; // Початкова вершина\r\n            const sink = matrix.length - 1; // Кінцева вершина\r\n\r\n            const result = fordFulkerson(matrix, source, sink);\r\n            setMaxFlowResult(result);\r\n            console.log(`Результат: Максимальний потік = ${result}`);\r\n        } else {\r\n            console.log(\"Алгоритм ще не реалізовано\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <section id=\"algorithms-section\">\r\n            <h2>Алгоритми</h2>\r\n            <button onClick={() => runAlgorithm(\"Максимальний потік\")}>Максимальний потік</button>\r\n            <button onClick={() => runAlgorithm(\"Мінімальний переріз\")}>Мінімальний переріз</button>\r\n            {maxFlowResult !== null && (\r\n                <div className=\"result\">\r\n                    <h3>Результат:</h3>\r\n                    <p>Максимальний потік: {maxFlowResult}</p>\r\n                </div>\r\n            )}\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Algorithms;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}